@layout MainLayout
@page "/customers"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<button class="btn btn-primary" @onclick="NewCustomer">New</button>
@if (_isLoading)
{
    <tr>
    <div class="spinner-border" role="status"></div>
    </tr>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                
                <th>Card Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if(customers.Count() != 0)
            {
                @foreach(var customer in customers)
                {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    @if(!deletedList)
                    {
                            <td>
                                <button class="btn btn-success" @onclick="()=>EditCustomer(customer)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Delete</button>
                            </td>
                    }
                    else
                    {
                        <td><button class="btn btn-danger" @onclick="() => Undo(customer)">Undo</button></td>
                    }

                </tr>
                }
            }            
        </tbody>
    </table>
    @if (!deletedList)
    {
        <div class="navbar navbar-default navbar-fixed-bottom">
            <div class="container">
        <button class="btn btn-warning btn-sm" @onclick="() => ShowDeletedCustomers()">Show Deleted Customers</button>
            </div>  
    </div>
        
    }
    else
    {
       <td><button class="btn btn-secondary" @onclick="()=>ShowActiveCustomers()">Back</button></td> 
    }

}


@code {
    private bool _isLoading { get; set; } = true;
    private bool deletedList { get; set; } = false;
    private List<CustomerViewModel> customers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/active");
        populate();
        _isLoading = false;
    }

    public async void NewCustomer()
    {
        navManager.NavigateTo("/newcustomer");
    }

    public async void EditCustomer(CustomerViewModel customer)
    {
        navManager.NavigateTo($"/newcustomer/{customer.Id}");
    }

    public async void DeleteCustomer(CustomerViewModel customer)
    {
        var response = await httpClient.DeleteAsync($"/customer/{customer.Id}");
        if (response.IsSuccessStatusCode)
        {
            customers.Remove(customer);
            this.StateHasChanged();
            return;
        }

        jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void Undo(CustomerViewModel customer)
    {
        var response = await httpClient.PutAsJsonAsync<CustomerViewModel>($"/customer/undo/{customer.Id}", customer);
        if (response.IsSuccessStatusCode)
        {
            customers.Remove(customer);
            this.StateHasChanged();
            return;
        }

        jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void ShowDeletedCustomers()
    {
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/inactive");
        deletedList = true;
        this.StateHasChanged();
    }

    public async void ShowActiveCustomers()
    {
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/active");
        deletedList = false;
        this.StateHasChanged();
    }

    // Mock Data
    public async void populate()
    {
        for(int i = 0; i < 10; i++)
        {
            customers.Add(new CustomerViewModel()
                {
                    Id = Guid.NewGuid(),
                    Name = "John",
                    Surname = "Eskioglou",
                    CardNumber = "A123495890384"
                });
        }
    }
}
