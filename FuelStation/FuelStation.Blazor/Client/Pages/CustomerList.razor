@layout MainLayout
@page "/customers"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<button class="btn btn-primary" @onclick="NewCustomer">New</button>
@if (_isLoading)
{
    <tr>
        <div class="spinner-border" role="status"></div>
    </tr>
}
else
{
    @if (allowed)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Surname</th>

                    <th>Card Number</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (customers.Count() != 0)
                {
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>@customer.Name</td>
                            <td>@customer.Surname</td>
                            <td>@customer.CardNumber</td>
                            @if (!deletedList)
                            {
                                <td>
                                    <button class="btn btn-success" @onclick="()=>EditCustomer(customer)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Delete</button>
                                </td>
                            }
                            else
                            {
                                <td><button class="btn btn-danger" @onclick="() => Undo(customer)">Undo</button></td>
                            }

                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (!deletedList)
        {
            <div class="navbar navbar-default navbar-fixed-bottom">
                <div class="container">
                    <button class="btn btn-warning btn-sm" @onclick="() => ShowDeletedCustomers()">Show Deleted Customers</button>
                </div>
            </div>

        }
        else
        {
            <td><button class="btn btn-secondary" @onclick="()=>ShowActiveCustomers()">Back</button></td>
        }
    }
    else
    {
        <h1>You are not authorized to see this context!!</h1>
    }

}


@code {
    private bool _isLoading { get; set; } = true;
    private bool deletedList { get; set; } = false;
    private bool allowed { get; set; } = false;
    private List<CustomerViewModel> customers { get; set; } = new();
    private Tools tools { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await tools.LoadAuthToken(httpClient, localStorage);

        allowed = await httpClient.GetFromJsonAsync<bool>("customer/authorization");
        if (allowed)
        {
            customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/active");    
        }
        
        _isLoading = false;
    }

    public async void NewCustomer()
    {
        navManager.NavigateTo("/newcustomer");
    }

    public async void EditCustomer(CustomerViewModel customer)
    {
        navManager.NavigateTo($"/newcustomer/{customer.Id}");
    }

    public async void DeleteCustomer(CustomerViewModel customer)
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        var response = await httpClient.DeleteAsync($"/customer/{customer.Id}");
        if (response.IsSuccessStatusCode)
        {
            customers.Remove(customer);
            this.StateHasChanged();
            return;
        }

        await jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void Undo(CustomerViewModel customer)
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        var response = await httpClient.PutAsJsonAsync<CustomerViewModel>($"/customer/undo/{customer.Id}", customer);
        if (response.IsSuccessStatusCode)
        {
            customers.Remove(customer);
            this.StateHasChanged();
            return;
        }

        await jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void ShowDeletedCustomers()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/inactive");
        deletedList = true;
        this.StateHasChanged();
    }

    public async void ShowActiveCustomers()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/active");
        deletedList = false;
        this.StateHasChanged();
    }

}
