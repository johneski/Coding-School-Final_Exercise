@layout MainLayout
@page "/customers"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<button class="btn btn-primary" @onclick="NewCustomer">New</button>
@if (_isLoading)
{
    <tr>
    <div class="spinner-border" role="status"></div>
    </tr>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                
                <th>Card Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if(customers.Count() != 0)
            {
                @foreach(var customer in customers)
                {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    if(!deletedList)
                    {
                        <td><button class="btn btn-success" @onclick="()=>EditCustomer(customer)" >Edit</button></td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Delete</button></td>
                    }
                    else
                    {
                        <td><button class="btn btn-danger" @onclick="() => Undo(customer)">Undo</button></td>
                    }

                </tr>
                }
            }            
        </tbody>
    </table>
    @if (!deletedList)
    {
        <div class="navbar navbar-default navbar-fixed-bottom">
            <div class="container">
        <button class="btn btn-warning btn-sm" @onclick="() => ShowDeletedCustomers()">Show Deleted Customers</button>
            </div>  
    </div>
        
    }
    else
    {
       <td><button class="btn btn-secondary" @onclick="()=>ShowActiveCustomers()">Back</button></td> 
    }

}


@code {
    private bool _isLoading { get; set; } = true;
    private bool deletedList { get; set; } = false;
    private List<CustomerViewModel> customers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var strToken = await localStorage.GetItemAsync<string>("authToken");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(strToken.Replace("\"", ""));
        customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("/customer/active");
        _isLoading = false;
    }

    public async void NewCustomer()
    {
        navManager.NavigateTo("/newcustomer");
    }

    public async void EditCustomer(CustomerViewModel customer)
    {

    }

    public async void DeleteCustomer(CustomerViewModel customer)
    {

    }

    public async void Undo(CustomerViewModel customer)
    {

    }

    public async void ShowDeletedCustomers()
    {
    
    }

    public async void ShowActiveCustomers()
    {
    
    }
}
