@layout MainLayout
@page "/items"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<PageTitle>Items</PageTitle>

<h1>Items</h1>

<button class="btn btn-primary" @onclick="NewItem">New</button>
@if (_isLoading)
{
    <tr>
    <div class="spinner-border" role="status"></div>
    </tr>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Cost</th>                
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if(items.Count() != 0)
            {
                @foreach(var item in items)
                {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Description</td>
                    <td>@item.Cost</td>
                    <td>@item.Price</td>
                    @if(!deletedList)
                    {
                            <td>
                                <button class="btn btn-success" @onclick="()=>EditItem(item)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                            </td>
                    }
                    else
                    {
                        <td><button class="btn btn-danger" @onclick="() => Undo(item)">Undo</button></td>
                    }

                </tr>
                }
            }            
        </tbody>
    </table>
    @if (!deletedList)
    {
        <div class="navbar navbar-default navbar-fixed-bottom">
            <div class="container">
        <button class="btn btn-warning btn-sm" @onclick="() => ShowDeletedItems()">Show Deleted Customers</button>
            </div>  
    </div>
        
    }
    else
    {
       <td><button class="btn btn-secondary" @onclick="()=>ShowActiveItems()">Back</button></td> 
    }

}


@code {
    private bool _isLoading { get; set; } = true;
    private bool deletedList { get; set; } = false;
    private List<ItemViewModel>? items { get; set; } = new();
    private Tools tools { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        items = await httpClient.GetFromJsonAsync<List<ItemViewModel>>("/item/active");
        _isLoading = false;
    }

    public async void NewItem()
    {
        navManager.NavigateTo("/newitem");
    }

    public async void EditItem(ItemViewModel item)
    {
        navManager.NavigateTo($"/newitem/{item.Id}");
    }

    public async void DeleteItem(ItemViewModel item)
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        var response = await httpClient.DeleteAsync($"/item/{item.Id}");
        if (response.IsSuccessStatusCode)
        {
            items.Remove(item);
            this.StateHasChanged();
            return;
        }

        await jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void Undo(ItemViewModel item)
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        var response = await httpClient.PutAsJsonAsync<ItemViewModel>($"/item/undo/{item.Id}", item);
        if (response.IsSuccessStatusCode)
        {
            items.Remove(item);
            this.StateHasChanged();
            return;
        }

        await jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong please try again!");
    }

    public async void ShowDeletedItems()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        items = await httpClient.GetFromJsonAsync<List<ItemViewModel>>("/item/inactive");
        deletedList = true;
        this.StateHasChanged();
    }

    public async void ShowActiveItems()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        items = await httpClient.GetFromJsonAsync<List<ItemViewModel>>("/item/active");
        deletedList = false;
        this.StateHasChanged();
    }
}