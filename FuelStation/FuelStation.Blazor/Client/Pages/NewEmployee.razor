@page "/newemployee/{id:guid?}"
@using FuelStation.Blazor.Shared.Enums
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<h3 class="mb-5">New Employee</h3>

@if (allowed)
{

    <EditForm Model="@employee" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-1">
                <label for="name" class="form-label">Name</label>
            </div>
            <div class="col-3">
                <InputText @bind-Value=employee.Name name="name" class="form-control" />
            </div>
            <div class="col-1">
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="col-2">
                <InputText @bind-Value=employee.Username name="username" class="form-control"></InputText>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <label class="form-label">SurName</label>
            </div>
            <div class="col-3">
                <InputText @bind-Value=employee.Surname class="form-control"  />
            </div>
            <div class="col-1">
                <label for="password" class="form-label">Password</label>
            </div>
            <div class="col-2">
                <InputText type="password" @bind-Value=employee.Password name="password" class="form-control"></InputText>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <label for="type" class="form-label">Type</label>
            </div>
            <div class="col-3">
                <InputSelect @bind-Value=employee.EmployeeType class="form-control" name="type">
                    @foreach (var type in Enum.GetValues(typeof(EmployeeType)))
                    {
                    <option value="@type">@type</option>
                    }
            </InputSelect>
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <label for="dateStart" class="form-label">Start Date</label>
        </div>
        <div class="col-3">
            <InputDate @bind-Value=employee.HireDateStart class="form-control" name="dateStart" />
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <label for="salary" class="form-label">Salary / Month</label>
        </div>
        <div class="col-3">
            <InputNumber @bind-Value=employee.SalaryPerMonth min="0" class="form-control" name="salary" />
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <button type="submit" class="btn btn-primary mt-3">Save</button>
        </div>
        <div class="col-1">
            <button class="btn btn-danger mt-3" @onclick="GoBack">Cancel</button>
        </div>
        @if (editMode)
            {
                <div class="col-8 justify-content-end d-flex">
                    <button class="btn btn-secondary mt-3" @onclick="() => Release()">Release</button>
                </div>
            }
    </div>
</EditForm>
}
else
{
    <h1>You are not authorized to see this context!!</h1>
}


@code {
    [Parameter] public Guid? id { get; set; }
    private bool editMode { get; set; } = false;
    private bool allowed { get; set; } = false;
    private EmployeeViewModel employee { get; set; } = new();
    private Tools tools { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await tools.LoadAuthToken(httpClient, localStorage);

        allowed = await httpClient.GetFromJsonAsync<bool>("/employee/authorization");
        if (!allowed) return;
        if(id is not null && Guid.Empty != id)
        {
            editMode = true;
            employee = await httpClient.GetFromJsonAsync<EmployeeViewModel>($"/employee/active/{id}");
        }
        else
        {
            employee.HireDateStart = DateTime.Now;
        }

    }

    private async void Save()
    {
        await tools.LoadAuthToken(httpClient, localStorage);
        var token = httpClient.DefaultRequestHeaders.Authorization;
        HttpResponseMessage response;
        if (id is null || id == Guid.Empty)
        {
            response = await httpClient.PostAsJsonAsync<EmployeeViewModel>("/employee", employee);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync<EmployeeViewModel>("/employee", employee);
        }

        if (!response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("window.alert", "Something went wrong!");
            return;
        }


        navManager.NavigateTo("employees", false);
    }

    private async void GoBack()
    {
        navManager.NavigateTo("/employees");
    }

    private async void Release()
    {
        employee.HireDateEnd = DateTime.Now;
        await httpClient.PutAsJsonAsync<EmployeeViewModel>("/employee", employee);
        await httpClient.DeleteAsync($"/employee/{employee.Id}");
        navManager.NavigateTo("employees", false);
    }
}
