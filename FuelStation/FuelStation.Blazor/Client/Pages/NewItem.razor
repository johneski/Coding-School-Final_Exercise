@page "/newitem/{id:guid?}"
@using FuelStation.Blazor.Shared.Enums
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@inject ILocalStorageService localStorage


<h3 class="mb-5">New Item</h3>


@if (allowed)
{
    <EditForm Model="@item" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-1">
                <label for="code" class="form-label">Code</label>
            </div>
            <div class="col-3">
                <InputText @bind-Value=item.Code name="code" class="form-control"  Readonly="true"/>
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <label for="description" class="form-label">Description</label>
            </div>
            <div class="col-3">
                <InputText @bind-Value=item.Description class="form-control" name="description"  />
            </div>
        </div>
        <div class="row">
            <div class="col-1">
                <label for="type" class="form-label">Type</label>
            </div>
            <div class="col-3">
                <InputSelect @bind-Value=item.ItemType class="form-control" name="type">
                    @foreach (var type in Enum.GetValues(typeof(ItemType)))
                    {
                    <option value="@type">@type</option>
                    }
            </InputSelect>
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <label for="cost" class="form-label">Cost</label>
        </div>
        <div class="col-3">
            <InputNumber @bind-Value=item.Cost MinValue="0" class="form-control" name="cost" />
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <label for="price" class="form-label">Price</label>
        </div>
        <div class="col-3">
            <InputNumber @bind-Value=item.Price MinValue="0" class="form-control" name="price" />
        </div>
    </div>
    <div class="row">
        <div class="col-1">
            <button type="submit" class="btn btn-primary mt-3">Save</button>
        </div>
        <div class="col-1">
            <button class="btn btn-danger mt-3" @onclick="GoBack">Cancel</button>
        </div>
    </div>
</EditForm>
}
else
{
    <h1>You are not authorized to see this context!!</h1>
}


@code {
    [Parameter] public Guid? id { get; set; }
    private bool allowed { get; set; } = false;
    private ItemViewModel item { get; set; } = new();
    private Tools tools { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await tools.LoadAuthToken(httpClient, localStorage);

        allowed = await httpClient.GetFromJsonAsync<bool>("/item/authorization");
        if (!allowed) return;

        if(id is not null && Guid.Empty != id)
        {
            item = await httpClient.GetFromJsonAsync<ItemViewModel>($"/item/active/{id}");
            return;
        }
        item.Code = await httpClient.GetFromJsonAsync<string>("/item/newcode");
    }

    private async void Save()
    {
        await tools.LoadAuthToken(httpClient, localStorage);

        HttpResponseMessage response;
        if(id is null || id == Guid.Empty)
        {
            response = await httpClient.PostAsJsonAsync<ItemViewModel>("/item", item);
        }
        else
        {
            response = await httpClient.PutAsJsonAsync<ItemViewModel>("/item", item);
        }

        response.EnsureSuccessStatusCode();
        navManager.NavigateTo("/items");
    }

    private async void GoBack()
    {
        navManager.NavigateTo("/items");
    }

}